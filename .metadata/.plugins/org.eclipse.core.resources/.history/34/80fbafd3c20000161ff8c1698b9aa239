package hanto.Test.studentThhughes.gamma;
//
//import static hanto.common.HantoPieceType.BUTTERFLY;
//import static hanto.common.HantoPieceType.SPARROW;
//import static hanto.common.HantoPlayerColor.BLUE;
//import static hanto.common.MoveResult.DRAW;
//import static hanto.common.MoveResult.OK;
//import static org.junit.Assert.*;
//
//import org.junit.Before;
//import org.junit.BeforeClass;
//import org.junit.Test;
//
//import hanto.common.HantoException;
//import hanto.common.HantoGame;
//import hanto.common.HantoGameID;
//import hanto.common.HantoPieceType;
//import hanto.common.MoveResult;
//import hanto.studentThhughes.HantoGameFactory;
//import hanto.studentThhughes.common.coordinate.HantoCoordinateImpl;
//
//public class GammaHantoTest {
//
//	
//	private static HantoGameFactory factory;
//	private HantoGame game;
//	
//	@BeforeClass
//	public static void initializeClass()
//	{
//		factory = HantoGameFactory.getInstance();
//	}
//	
//	@Before
//	public void setup()
//	{
//		// By default, blue moves first.
//		game = factory.makeHantoGame(HantoGameID.GAMMA_HANTO, BLUE);
//	}
//	
//	
//	@Test //1
//	public void testNotNull(){
//		assertNotNull(game);
//	}
//	
//	@Test//2
//	public void makeSingleMoveCorrectly() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
//		assertEquals(MoveResult.OK,result);
//		assertNotNull(game.getPieceAt(new HantoCoordinateImpl(0,0)));
//		assertTrue((game.getPieceAt(new HantoCoordinateImpl(0,0)).getType() == HantoPieceType.BUTTERFLY));
//	}
//	
//	@Test//3
//	public void placingThreePiecesOnTheBoardCorrectly() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));
//		assertEquals(MoveResult.OK,result);
//		
//
//		assertNotNull(game.getPieceAt(new HantoCoordinateImpl(0,-1)));
//		assertTrue((game.getPieceAt(new HantoCoordinateImpl(0,-1)).getType() == HantoPieceType.SPARROW));
//	}
//	
//	@Test(expected=HantoException.class)//4
//	public void placingThreePiecesOnTheBoardInCorrectlyBasedOffTheirColors() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,2));
//		
//	}
//	
//	@Test //5
//	public void moveButterflyOnSecondRedTurn() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.BUTTERFLY, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(1,0));
//		assertEquals(MoveResult.OK,result);
//		assertNull(game.getPieceAt(new HantoCoordinateImpl(0,1)));
//		assertNotNull(game.getPieceAt(new HantoCoordinateImpl(1,0)));
//		
//	}
//	
//	@Test(expected=HantoException.class) //6
//	public void moveButterflyOnSecondTurnRedToDisjointPlace() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.BUTTERFLY, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(0,2));
//		
//	}
//	
//	@Test(expected=HantoException.class) //7
//	public void moveButterflyOnSecondTurnRedLegalPlaceThatsTooFarAway() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.BUTTERFLY, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(0,-2));
//		
//	}
//	
//	@Test(expected=HantoException.class)  //8
//	public void testMovingMostlySurroundedPiece() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0)); //b
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1)); 			 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-1,2));			 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-1,0));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,-1));// Setup	 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-1,2), 					//r
//				new HantoCoordinateImpl(-1,1));			 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(0,0), 					//b
//				new HantoCoordinateImpl(1,0));			 //r
//
//	}
//	
//	@Test  //9
//	public void testMovingMostlyNotSurroundedPiece() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0)); //b
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1)); 			 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-1,2));			 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-1,0));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,-2));// Setup	 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-1,2), 					//r
//				new HantoCoordinateImpl(-1,1));			 //r
//		result = game.makeMove(HantoPieceType.BUTTERFLY, new HantoCoordinateImpl(0,0), 					//b
//				new HantoCoordinateImpl(1,0));			 //r
//		assertEquals(game.getPieceAt(new HantoCoordinateImpl(1,0)).getType(),HantoPieceType.BUTTERFLY);
//		assertNull(game.getPieceAt(new HantoCoordinateImpl(0,0)));
//	}
//	
//	@Test(expected=HantoException.class) //10
//	public void movePieceThatDoesntExistEGWrongLocation() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.BUTTERFLY, new HantoCoordinateImpl(3,0), new HantoCoordinateImpl(1,0));
//		
//	}
//	
//	@Test(expected=HantoException.class) //11
//	public void movePieceThatDoesntExistEGWrongPiece() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));
//		assertEquals(MoveResult.OK,result);
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(1,0));
//		
//	}
//	
//	@Test(expected=HantoException.class)  //12
//	public void testAddingTooManyPieces() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0)); //b
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1)); 			 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,2));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-2));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,3));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-3));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,4));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-4));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,5));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-5));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,6));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-6));			 //b
//	}
//	
//	@Test(expected=HantoException.class)  //12
//	public void testnotPlayingButterflyRightAway() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,0)); //b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,1)); 			 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,2));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-2));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,3));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-3));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,4));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-4));			 //b
//		
//	}
//	
//	@Test(expected=HantoException.class)  //12
//	public void testPlayingIllegalItem() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.CRAB, null, new HantoCoordinateImpl(0,0)); //b
//	}
//	
//	@Test(expected=HantoException.class) //13
//	public void testPlacingPieceOnInvalidTileFirstTime() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(1,0)); //b
//		
//	}
//	
//	@Test //13
//	public void testGameLimitationAfterTwentyMoves() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0)); 	//b
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(-1,0)); 			 	//r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,0));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-2,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(1,0), new HantoCoordinateImpl(0,1));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,1), new HantoCoordinateImpl(-2,0));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(1,0));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,0), new HantoCoordinateImpl(-2,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(1,0), new HantoCoordinateImpl(0,1));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,1), new HantoCoordinateImpl(-2,0));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(1,0));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,0), new HantoCoordinateImpl(-2,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(1,0), new HantoCoordinateImpl(0,1));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,1), new HantoCoordinateImpl(-2,0));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(1,0));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,0), new HantoCoordinateImpl(-2,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(1,0), new HantoCoordinateImpl(0,1));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,1), new HantoCoordinateImpl(-2,0));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(1,0));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,0), new HantoCoordinateImpl(-2,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(1,0), new HantoCoordinateImpl(0,1));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,1), new HantoCoordinateImpl(-2,0));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(1,0));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,0), new HantoCoordinateImpl(-2,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(1,0), new HantoCoordinateImpl(0,1));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,1), new HantoCoordinateImpl(-2,0));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(1,0));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,0), new HantoCoordinateImpl(-2,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(1,0), new HantoCoordinateImpl(0,1));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,1), new HantoCoordinateImpl(-2,0));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(1,0));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,0), new HantoCoordinateImpl(-2,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(1,0), new HantoCoordinateImpl(0,1));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,1), new HantoCoordinateImpl(-2,0));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(1,0));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,0), new HantoCoordinateImpl(-2,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(1,0), new HantoCoordinateImpl(0,1));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,1), new HantoCoordinateImpl(-2,0));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(1,0));			 //b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,0), new HantoCoordinateImpl(-2,1));				 //r
//		
//		assertEquals(MoveResult.DRAW,result);
//	}
//	
//	@Test //14
//	public void testThatRedCanWin() throws HantoException{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0)); 	//b
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(-1,0)); 			 	//r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,0));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-2,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,1));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,1), new HantoCoordinateImpl(-1,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,-1));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-1,-1));			 		//r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(2,0));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-1,-1), new HantoCoordinateImpl(0,-1));			 		//r
//		assertEquals(result,MoveResult.RED_WINS);
//	}
//	
//	@Test // 15
//	public void redAndBlueWinResultingInDraw() throws HantoException
//	{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0)); 	//b
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(-1,0)); 			 	//r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,0));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-2,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,1));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,1), new HantoCoordinateImpl(-1,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,-1));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-1,-1));			 		//r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(2,0));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-2,1));			 		//r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,-2));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-2,0));			 		//r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(1,-2), new HantoCoordinateImpl(0,-1)); 		//b
//		assertEquals(MoveResult.DRAW,result);
//		
//	}
//	
//	@Test(expected=HantoException.class)  // 16
//	public void testGameOver() throws HantoException
//	{
//		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0)); 	//b
//		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(-1,0)); 			 	//r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,0));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-2,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,1));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-2,1), new HantoCoordinateImpl(-1,1));				 //r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,-1));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-1,-1));			 		//r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(2,0));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-2,1));			 		//r
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,-2));			 		//b
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-2,0));			 		//r
//		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(1,-2), new HantoCoordinateImpl(0,-1)); 		//b
//		assertEquals(MoveResult.DRAW,result);
//		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-2,2));
//		
//	}
//	
//	
//	@Test(expected=HantoException.class)  // 17
//	public void testPassingNullTo() throws HantoException
//	{
//		game.makeMove(HantoPieceType.BUTTERFLY, null, null); 	//b
//		
//	}
//	
//	
//	
//	
//	
//	
//	
//}


package hanto.studentxxx.gamma;

import static hanto.common.HantoPieceType.*;
import static hanto.common.HantoPlayerColor.*;
import static hanto.common.MoveResult.*;
import static org.junit.Assert.*;
import org.junit.*;
import hanto.common.*;
import hanto.studentgpollice.HantoGameFactory;

public class GammaHantoAcceptanceTest
{
	class MoveData {
		final HantoPieceType type;
		final HantoCoordinate from, to;
		
		private MoveData(HantoPieceType type, HantoCoordinate from, HantoCoordinate to) 
		{
			this.type = type;
			this.from = from;
			this.to = to;
		}
	}
	
	/**
	 * Internal class for these test cases.
	 * @version Sep 13, 2014
	 */
	class TestHantoCoordinate implements HantoCoordinate
	{
		private final int x, y;
		
		public TestHantoCoordinate(int x, int y)
		{
			this.x = x;
			this.y = y;
		}
		/*
		 * @see hanto.common.HantoCoordinate#getX()
		 */
		@Override
		public int getX()
		{
			return x;
		}

		/*
		 * @see hanto.common.HantoCoordinate#getY()
		 */
		@Override
		public int getY()
		{
			return y;
		}

	}
	
	private static HantoGameFactory factory;
	private HantoGame game;
	
	@BeforeClass
	public static void initializeClass()
	{
		factory = HantoGameFactory.getInstance();
	}
	
	@Before
	public void setup()
	{
		// By default, blue moves first.
		game = factory.makeHantoGame(HantoGameID.GAMMA_HANTO, BLUE);
	}
	
	@Test
	public void bluePlacesButterflyFirst() throws HantoException
	{
		final MoveResult mr = game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		assertEquals(OK, mr);
		final HantoPiece piece = game.getPieceAt(makeCoordinate(0, 0));
		assertEquals(BLUE, piece.getColor());
		assertEquals(BUTTERFLY, piece.getType());
	}
	
	@Test
	public void redPlacesSparrowFirst() throws HantoException
	{
		game = factory.makeHantoGame(HantoGameID.GAMMA_HANTO, RED);
		final MoveResult mr = game.makeMove(SPARROW, null, makeCoordinate(0, 0));
		assertEquals(OK, mr);
	}
	
	@Test
	public void blueMovesSparrow() throws HantoException
	{
		final MoveResult mr = makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1), md(SPARROW, 0, -1),
				md(SPARROW, 0, 2), md(SPARROW, 0, -1, -1, 0));
		assertEquals(OK, mr);
		checkPieceAt(-1, 0, BLUE, SPARROW);
	}
	
	@Test(expected=HantoException.class)
	public void moveToDisconnectConfiguration() throws HantoException
	{
		makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1), md(BUTTERFLY, 0, 0, 0, -1));
	}
	
	@Test(expected=HantoException.class)
	public void moveButterflyToSameHex() throws HantoException
	{
		makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1), md(BUTTERFLY, 0, 0, 0, 0));
	}
	
	@Test(expected=HantoException.class)
	public void moveSparrowToOccupiedHex() throws HantoException
	{
		makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1), md(SPARROW, 0, -1),
				md(SPARROW, 0, 2), md(SPARROW, 0, -1, 0, 0));
	}
	
	@Test(expected=HantoException.class)
	public void moveFromEmptyHex() throws HantoException
	{
		makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1), md(BUTTERFLY, 1, 0, 1, -1));
	}
	
	@Test(expected=HantoException.class)
	public void tryToMoveTooFar() throws HantoException
	{
		makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1), md(BUTTERFLY, 0, 0, -1, 2));
	}
	
	@Test(expected=HantoException.class)
	public void tryToMoveWrongPieceType() throws HantoException
	{
		makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1), md(SPARROW, 0, -1),
				md(SPARROW, 0, 2), md(BUTTERFLY, 0, -1, -1, 0));
	}
	
	@Test(expected=HantoException.class)
	public void tryToMoveWrongColorPiece() throws HantoException
	{
		makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1), md(SPARROW, 0, -1),
				md(SPARROW, 0, 2), md(SPARROW, 0, 2, 1, 1));
	}
	
	@Test(expected=HantoException.class)
	public void tryToMoveWhenNotEnoughSpace() throws HantoException
	{
		makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1), 
				md(SPARROW, -1, 0), md(SPARROW, 0, 2),
				md(SPARROW, 1, -1), md(SPARROW, 0, 3),
				md(BUTTERFLY, 0, 0, 0, -1));
	}
	
	@Test(expected=HantoException.class)
	public void tryToUseTooManyButterflies() throws HantoException
	{
		makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1), md(BUTTERFLY, 0, -1));
	}
	
	@Test(expected=HantoException.class)
	public void tryToUseTooManySparrows() throws HantoException
	{
		makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1), 
				md(SPARROW, 0, -1), md(SPARROW, 0, 2),
				md(SPARROW, 0, -2), md(SPARROW, 0, 3),
				md(SPARROW, 0, -3), md(SPARROW, 0, 4),
				md(SPARROW, 0, -4), md(SPARROW, 0, 5),
				md(SPARROW, 0, -5), md(SPARROW, 0, 6),
				md(SPARROW, 0, -6));
	}
	
	@Test(expected=HantoException.class)
	public void tryToUsePieceNotInGame() throws HantoException
	{
		makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1), 
				md(CRANE, 0, -1));
	}
	
	@Test
	public void blueWins() throws HantoException
	{
		MoveResult mr = makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1),
				md(SPARROW, -1, 0), md(SPARROW, 1, 1),
				md(SPARROW, 1, -1), md(SPARROW, 0, 2),
				md(SPARROW, 1, -1, 1, 0), md(SPARROW, -1, 2),
				md(SPARROW, -1, 0, -1, 1));
		assertEquals(BLUE_WINS, mr);
	}
	
	@Test
	public void redSelfLoses() throws HantoException
	{
		MoveResult mr = makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1),
				md(SPARROW, -1, 0), md(SPARROW, 0, 2),
				md(SPARROW, 1, -1), md(SPARROW, 1, 2),
				md(SPARROW, 1, -1, 1, 0), md(SPARROW, -1, 2),
				md(SPARROW, -1, 0, -1, 1), md(SPARROW, 1, 2, 1, 1));
		assertEquals(BLUE_WINS, mr);
	}
	
	@Test(expected=HantoException.class)
	public void tryToPlacePieceNextToOpponent() throws HantoException
	{
		makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1),
				md(SPARROW, -1, 0), md(SPARROW, -2, 0));
	}
	
	@Test
	public void drawAfterTwentyTurns() throws HantoException
	{
		MoveResult mr = makeMoves(
				md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1),
				md(SPARROW, 1, -1), md(SPARROW, -1, 2),
				md(SPARROW, 1, -1, 0, -1), md(SPARROW, -1, 2, 0, 2),
				md(SPARROW, 0, -1, 1, -1), md(SPARROW, 0, 2, -1, 2),
				md(SPARROW, 1, -1, 0, -1), md(SPARROW, -1, 2, 0, 2),
				md(SPARROW, 0, -1, 1, -1), md(SPARROW, 0, 2, -1, 2),
				md(SPARROW, 1, -1, 0, -1), md(SPARROW, -1, 2, 0, 2),
				md(SPARROW, 0, -1, 1, -1), md(SPARROW, 0, 2, -1, 2),
				md(SPARROW, 1, -1, 0, -1), md(SPARROW, -1, 2, 0, 2),
				md(SPARROW, 0, -1, 1, -1), md(SPARROW, 0, 2, -1, 2),
				md(SPARROW, 1, -1, 0, -1), md(SPARROW, -1, 2, 0, 2),
				md(SPARROW, 0, -1, 1, -1), md(SPARROW, 0, 2, -1, 2),
				md(SPARROW, 1, -1, 0, -1), md(SPARROW, -1, 2, 0, 2),
				md(SPARROW, 0, -1, 1, -1), md(SPARROW, 0, 2, -1, 2),
				md(SPARROW, 1, -1, 0, -1), md(SPARROW, -1, 2, 0, 2),
				md(SPARROW, 0, -1, 1, -1), md(SPARROW, 0, 2, -1, 2),
				md(SPARROW, 1, -1, 0, -1), md(SPARROW, -1, 2, 0, 2),
				md(SPARROW, 0, -1, 1, -1), md(SPARROW, 0, 2, -1, 2),
				md(SPARROW, 1, -1, 0, -1), md(SPARROW, -1, 2, 0, 2),
				md(SPARROW, 0, -1, 1, -1), md(SPARROW, 0, 2, -1, 2));
		assertEquals(DRAW, mr);
	}
	
	@Test(expected=HantoException.class)
	public void butterflyNotPlacedByFourthMoveByFirstPlayer() throws HantoException
	{
		makeMoves(md(SPARROW, 0, 0), md(SPARROW, 0, 1),
				md(SPARROW, 0, -1), md(SPARROW, 0, 2),
				md(SPARROW, 0, -2), md(SPARROW, 0, 3),
				md(SPARROW, 0, -3));
	}
	
	@Test(expected=HantoException.class)
	public void butterflyNotPlacedByFourthMoveBySecondPlayer() throws HantoException
	{
		makeMoves(md(SPARROW, 0, 0), md(SPARROW, 0, 1),
				md(BUTTERFLY, 0, -1), md(SPARROW, 0, 2),
				md(SPARROW, 0, -2), md(SPARROW, 0, 3),
				md(SPARROW, 0, -3), md(SPARROW, 0, 4));
	}
	
	@Test(expected=HantoException.class)
	public void tryToMoveAfterGameIsOver() throws HantoException
	{
		makeMoves(md(BUTTERFLY, 0, 0), md(BUTTERFLY, 0, 1),
				md(SPARROW, -1, 0), md(SPARROW, 1, 1),
				md(SPARROW, 1, -1), md(SPARROW, 0, 2),
				md(SPARROW, 1, -1, 1, 0), md(SPARROW, -1, 2),
				md(SPARROW, -1, 0, -1, 1), md(SPARROW, 0, 3));
	}
	
	@Test(expected=HantoException.class)
	public void extraCreditMoveSparrowBeforeButterflyIsOnBoard() throws HantoException
	{
		makeMoves(md(SPARROW, 0, 0), md (BUTTERFLY, 0, 1));
		final HantoPiece piece = game.getPieceAt(makeCoordinate(0, 0));
		assertEquals(SPARROW, piece.getType());
		assertEquals(BLUE, piece.getColor());
	}
	
	// Helper methods
	private HantoCoordinate makeCoordinate(int x, int y)
	{
		return new TestHantoCoordinate(x, y);
	}
	
	/**
	 * Make sure that the piece at the location is what you expect
	 * @param x x-coordinate
	 * @param y y-coordinate
	 * @param color piece color expected
	 * @param type piece type expected
	 */
	private void checkPieceAt(int x, int y, HantoPlayerColor color, HantoPieceType type)
	{
		final HantoPiece piece = game.getPieceAt(makeCoordinate(x, y));
		assertEquals(color, piece.getColor());
		assertEquals(type, piece.getType());
	}
	
	/**
	 * Make a MoveData object given the piece type and the x and y coordinates of the
	 * desstination. This creates a move data that will place a piece (source == null)
	 * @param type piece type
	 * @param toX destination x-coordinate
	 * @param toY destination y-coordinate
	 * @return the desitred MoveData object
	 */
	private MoveData md(HantoPieceType type, int toX, int toY) 
	{
		return new MoveData(type, null, makeCoordinate(toX, toY));
	}
	
	private MoveData md(HantoPieceType type, int fromX, int fromY, int toX, int toY)
	{
		return new MoveData(type, makeCoordinate(fromX, fromY), makeCoordinate(toX, toY));
	}
	
	/**
	 * Make the moves specified. If there is no exception, return the move result of
	 * the last move.
	 * @param moves
	 * @return the last move result
	 * @throws HantoException
	 */
	private MoveResult makeMoves(MoveData... moves) throws HantoException
	{
		MoveResult mr = null;
		for (MoveData md : moves) {
			mr = game.makeMove(md.type, md.from, md.to);
		}
		return mr;
	}
}
