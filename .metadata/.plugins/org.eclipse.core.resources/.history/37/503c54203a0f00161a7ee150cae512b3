/*******************************************************************************
 * This files was developed for CS4233: Object-Oriented Analysis & Design.
 * The course was taken at Worcester Polytechnic Institute.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/

package hanto.studentthhughes.tournament;

import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import hanto.common.*;
import hanto.studentthhughes.actionfinder.ActionFinder;
import hanto.studentthhughes.common.coordinate.HantoCoordinateImpl;
import hanto.studentthhughes.common.hantoboardandboardtools.HantoBoard;
import hanto.studentthhughes.common.hantoboardandboardtools.HantoBoardImpl;
import hanto.studentthhughes.common.hantopiece.HantoPieceImpl;
import hanto.studentthhughes.common.movecounter.MoveCounter;
import hanto.studentthhughes.common.movecounter.MoveCounterImpl;
import hanto.tournament.*;

/**
 * Description
 * @version Oct 13, 2014
 */
public class HantoPlayer implements HantoGamePlayer
{
	boolean iMoveFirst = false;
	boolean hasMovedOnce = false;
	List<HantoMoveRecord> firstMoveList;
	HantoBoard theBoard;
	MoveCounter theCounter;
	HantoPlayerColor color;
	ActionFinder af;
	
	
	public HantoPlayer(){
		fillFirstMoveList();
	}
	
	private void fillFirstMoveList(){
		firstMoveList = new LinkedList<HantoMoveRecord>();
		for(HantoCoordinate hc : (new HantoCoordinateImpl(0,0)).getNeighbors()){
			firstMoveList.add(new HantoMoveRecord(HantoPieceType.BUTTERFLY, null, hc));
		}
		theBoard = new HantoBoardImpl();
		theCounter = new MoveCounterImpl();
	}
	
	
	
	/*
	 * @see hanto.tournament.HantoGamePlayer#startGame(hanto.common.HantoGameID, hanto.common.HantoPlayerColor, boolean)
	 */
	@Override
	public void startGame(HantoGameID version, HantoPlayerColor myColor,
			boolean doIMoveFirst)
	{
		System.out.println("startGame");
		
		color = myColor;
		af = new ActionFinder(version);
		iMoveFirst = doIMoveFirst;
		
		
	}

	/*
	 * @see hanto.tournament.HantoGamePlayer#makeMove(hanto.tournament.HantoMoveRecord)
	 */
	@Override
	public HantoMoveRecord makeMove(HantoMoveRecord opponentsMove)
	{
		HantoMoveRecord result = null;
		if(iMoveFirst && opponentsMove==null ){
			result = new HantoMoveRecord(HantoPieceType.BUTTERFLY, null, 
					new HantoCoordinateImpl(0,0));
			hasMovedOnce = true;
		}else{
			makeOpponentAction(opponentsMove);
			if(!hasMovedOnce){
				result = getOtherFirstMove();
			}else{
				result = af.getAction(theBoard, theCounter, color);
			}
		}
		return result;
	}

	private HantoMoveRecord getOtherFirstMove() {
		Random r = new Random();
		
		return firstMoveList.get(r.nextInt(firstMoveList.size()+1));
	}

	private void makeOpponentAction(HantoMoveRecord opponentsMove) {
		try {
			theBoard.removeFromBoard(opponentsMove.getFrom());
			theBoard.placeOnBoard(new HantoPieceImpl(getOpponentColor(),opponentsMove.getPiece()),
					opponentsMove.getTo());
		} catch (HantoException e) {
			e.printStackTrace();
		}
	}
	
	private HantoPlayerColor getOpponentColor(){
		HantoPlayerColor result = null;
		if(color == HantoPlayerColor.RED){
			result = HantoPlayerColor.BLUE;
		}else{
			result = HantoPlayerColor.RED;
		}
		return result;
	}

}
