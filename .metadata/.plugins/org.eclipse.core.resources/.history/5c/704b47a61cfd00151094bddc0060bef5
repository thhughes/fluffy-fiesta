package hanto.Test.studentThhughes.gamma;

import static hanto.common.HantoPlayerColor.BLUE;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import hanto.common.HantoException;
import hanto.common.HantoGame;
import hanto.common.HantoGameID;
import hanto.common.HantoPieceType;
import hanto.common.MoveResult;
import hanto.studentThhughes.HantoGameFactory;
import hanto.studentThhughes.common.coordinate.HantoCoordinateImpl;

public class GammaHantoTest {

	
	private static HantoGameFactory factory;
	private HantoGame game;
	
	@BeforeClass
	public static void initializeClass()
	{
		factory = HantoGameFactory.getInstance();
	}
	
	@Before
	public void setup()
	{
		// By default, blue moves first.
		game = factory.makeHantoGame(HantoGameID.GAMMA_HANTO, BLUE);
	}
	
	
	@Test //1
	public void testNotNull(){
		assertNotNull(game);
	}
	
	@Test//2
	public void makeSingleMoveCorrectly() throws HantoException{
		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
		assertEquals(MoveResult.OK,result);
		assertNotNull(game.getPieceAt(new HantoCoordinateImpl(0,0)));
		assertTrue((game.getPieceAt(new HantoCoordinateImpl(0,0)).getType() == HantoPieceType.BUTTERFLY));
	}
	
	@Test//3
	public void placingThreePiecesOnTheBoardCorrectly() throws HantoException{
		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
		assertEquals(MoveResult.OK,result);
		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1));
		assertEquals(MoveResult.OK,result);
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));
		assertEquals(MoveResult.OK,result);
		

		assertNotNull(game.getPieceAt(new HantoCoordinateImpl(0,-1)));
		assertTrue((game.getPieceAt(new HantoCoordinateImpl(0,-1)).getType() == HantoPieceType.SPARROW));
	}
	
	@Test(expected=HantoException.class)//4
	public void placingThreePiecesOnTheBoardInCorrectlyBasedOffTheirColors() throws HantoException{
		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
		assertEquals(MoveResult.OK,result);
		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1));
		assertEquals(MoveResult.OK,result);
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,2));
		
	}
	
	@Test //5
	public void moveButterflyOnSecondRedTurn() throws HantoException{
		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
		assertEquals(MoveResult.OK,result);
		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1));
		assertEquals(MoveResult.OK,result);
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));
		assertEquals(MoveResult.OK,result);
		result = game.makeMove(HantoPieceType.BUTTERFLY, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(1,0));
		assertEquals(MoveResult.OK,result);
		assertNull(game.getPieceAt(new HantoCoordinateImpl(0,1)));
		assertNotNull(game.getPieceAt(new HantoCoordinateImpl(1,0)));
		
	}
	
	@Test(expected=HantoException.class) //6
	public void moveButterflyOnSecondTurnRedToDisjointPlace() throws HantoException{
		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
		assertEquals(MoveResult.OK,result);
		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1));
		assertEquals(MoveResult.OK,result);
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));
		assertEquals(MoveResult.OK,result);
		result = game.makeMove(HantoPieceType.BUTTERFLY, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(0,2));
		
	}
	
	@Test(expected=HantoException.class) //7
	public void moveButterflyOnSecondTurnRedLegalPlaceThatsTooFarAway() throws HantoException{
		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0));
		assertEquals(MoveResult.OK,result);
		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1));
		assertEquals(MoveResult.OK,result);
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));
		assertEquals(MoveResult.OK,result);
		result = game.makeMove(HantoPieceType.BUTTERFLY, new HantoCoordinateImpl(0,1), new HantoCoordinateImpl(0,-2));
		
	}
	
	@Test(expected=HantoException.class)  //7
	public void testMovingMostlySurroundedPiece() throws HantoException{
		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0)); //b
		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1)); 			 //r
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));			 //b
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-1,2));			 //r
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-1,0));			 //b
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,1));				 //r
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,-1));// Setup	 //b
		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-1,2), 					//r
				new HantoCoordinateImpl(-1,1));			 //r
		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(0,0), 					//b
				new HantoCoordinateImpl(1,0));			 //r

	}
	
	@Test  //7
	public void testMovingMostlyNotSurroundedPiece() throws HantoException{
		MoveResult result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,0)); //b
		result = game.makeMove(HantoPieceType.BUTTERFLY, null, new HantoCoordinateImpl(0,1)); 			 //r
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(0,-1));			 //b
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-1,2));			 //r
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(-1,0));			 //b
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,1));				 //r
		result = game.makeMove(HantoPieceType.SPARROW, null, new HantoCoordinateImpl(1,-2));// Setup	 //b
		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(-1,2), 					//r
				new HantoCoordinateImpl(-1,1));			 //r
		result = game.makeMove(HantoPieceType.SPARROW, new HantoCoordinateImpl(0,0), 					//b
				new HantoCoordinateImpl(1,0));			 //r
		assertEquals(game.getPieceAt(new HantoCoordinateImpl(1,0)).getType(),HantoPieceType.BUTTERFLY);
		assertNull(game.getPieceAt(new HantoCoordinateImpl(0,0)));
	}
	
	
	
	
	
}
