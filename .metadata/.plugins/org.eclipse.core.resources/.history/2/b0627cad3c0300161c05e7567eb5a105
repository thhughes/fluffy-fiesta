package hanto.studentthhughes;

import hanto.common.HantoCoordinate;
import hanto.common.HantoException;
import hanto.common.HantoGame;
import hanto.common.HantoPiece;
import hanto.common.HantoPieceType;
import hanto.common.HantoPlayerColor;
import hanto.common.MoveResult;
import hanto.studentthhughes.common.colormanager.ColorManager;
import hanto.studentthhughes.common.coordinate.HantoCoordinateImpl;
import hanto.studentthhughes.common.gamestateevaluator.GameStateEvaluator;
import hanto.studentthhughes.common.hantoboardandboardtools.HantoBoard;
import hanto.studentthhughes.common.hantoboardandboardtools.HantoBoardImpl;
import hanto.studentthhughes.common.hantopiece.HantoPieceImpl;
import hanto.studentthhughes.common.movecounter.MoveCounterImpl;
import hanto.studentthhughes.common.turnactionvalidator.TurnActionValidator;

public abstract class TemplateHantoGame implements HantoGame {
	
	protected ColorManager hantoColorManager;
	protected HantoBoard hantoBoard = new HantoBoardImpl();
	protected MoveCounterImpl moveCounter = new MoveCounterImpl();
	protected TurnActionValidator actionValidator;
	protected GameStateEvaluator gameStateEvaluator;
	protected boolean gameOver = false;
	protected boolean canSurrender = false;

	protected MoveResult result = MoveResult.OK;
	protected MoveResult surrenderOutcome = null;
	
	protected HantoPlayerColor playerColor;
	protected HantoCoordinateImpl safeTo = null;
	protected HantoCoordinateImpl safeFrom = null;
	protected HantoPieceImpl currentPiece = null;
	
	
	/**
	 * Constructor for a hanto game: 
	 * @param firstMovePlayer
	 * 					HantoPlayerColor : player who goes first
	 * @param mValidator
	 * 					MoveValidator :
	 * @param bValidator
	 * 					BoardValidator :
	 */
	public TemplateHantoGame(HantoPlayerColor firstMovePlayer, TurnActionValidator tav, GameStateEvaluator gse){
		hantoColorManager = new ColorManager(firstMovePlayer);
		actionValidator = tav;
		gameStateEvaluator = gse;
		
	}

	@Override
	public MoveResult makeMove(HantoPieceType pieceType, HantoCoordinate from, HantoCoordinate to)
			throws HantoException {

		if(gameOver) 
			handleGameOver();
		
		playerColor = hantoColorManager.getCurrentColor();
		if(canSurrender && isPlayerSurrendering(pieceType, from, to)){
			handleSurrender();
		}else{
			currentPiece = new HantoPieceImpl(hantoColorManager.getCurrentColor(),pieceType);
			setCurrentCoordinates(to,from);
			
			checkActionValidators();
			placePieceOnBoard();
			
			
		}
		return result;
	}
	
	
	private void placePieceOnBoard() throws HantoException
	{		

		moveCounter.incrementNumberMoves(playerColor);
		hantoBoard.placeOnBoard(currentPiece, safeTo);
		hantoColorManager.toggleCurrentColor();
	}

	
	/**
	 * This method checks all of the action validators to ensure that the move that is about to be made is a valid move. 
	 * 
	 * @throws HantoException
	 * 			Throws an exception if the action that the player wants to make is illegal.
	 */
	protected void checkActionValidators() throws HantoException
	{
		if(!actionValidator.isValidMove(hantoBoard, currentPiece, moveCounter, safeTo, safeFrom))
		{
			actionValidator.invalidError();
		}
		
	}

	/**
	 * This method error checks the coordinates that the player's move could involve. 
	 * 
	 * @param to
	 * 			HantoCoordinate
	 * @param from
	 * 			HantoCoordinate
	 * @throws HantoException
	 * 				Throws exception if the 'to' location is null
	 */
	protected void setCurrentCoordinates(HantoCoordinate to, HantoCoordinate from) throws HantoException {
		if(to == null)
			throw new HantoException("Cannot do anything with a null to location");
		safeTo = new HantoCoordinateImpl(to);
		if(from != null)
			safeFrom = new HantoCoordinateImpl(from);
		
		
	}

	/**
	 * This method is here to handle the outcome if a surrender condition occurs
	 */
	protected void handleSurrender() {
		if(playerColor == HantoPlayerColor.RED){
			result = MoveResult.BLUE_WINS;
		}else{
			result = MoveResult.RED_WINS;
		}
	}

	/**
	 * This function checks if a player is surrendering.
	 * 
	 * @param pieceType
	 * 				HantoPieceType
	 * @param from
	 * 				HantoCoordinate
	 * @param to
	 * 			HantoCoordinate
	 * @return
	 * 			Boolean : True if the player is surrendering
	 */
	protected boolean isPlayerSurrendering(HantoPieceType pieceType, HantoCoordinate from, HantoCoordinate to) {
		return (pieceType == null) && (from == null) && (to == null);
	}

	/**
	 * This function handles what to do if there is a game over. 
	 * 
	 * @throws HantoException
	 */
	protected void handleGameOver() throws HantoException {
		throw new HantoException("Game is over, cannot make moves after game has terminated");
	}

	@Override
	public HantoPiece getPieceAt(HantoCoordinate where) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getPrintableBoard() {
		// TODO Auto-generated method stub
		return null;
	}

}
