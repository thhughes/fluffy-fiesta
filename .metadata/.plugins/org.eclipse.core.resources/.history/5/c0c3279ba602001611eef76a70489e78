/*******************************************************************************
 * This files was developed for CS4233: Object-Oriented Analysis & Design. The course was
 * taken at Worcester Polytechnic Institute. All rights reserved. This program and the
 * accompanying materials are made available under the terms of the Eclipse Public License
 * v1.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
package hanto.studentthhughes.common.movevalidator;

import java.util.Queue;

import hanto.common.HantoCoordinate;
import hanto.common.HantoException;
import hanto.common.HantoPiece;
import hanto.common.HantoPlayerColor;
import hanto.studentthhughes.common.coordinate.HantoCoordinateImpl;
import hanto.studentthhughes.common.hantoboard.HantoBoard;
import hanto.studentthhughes.common.movecounter.MoveCounter;
import hanto.studentthhughes.common.movecounter.MoveCounterImpl;

/**
 * This class is used to make sure that the piece is moved to a contiguous location. 
 * 
 * @author Troy
 *
 */
public class LocationValidator extends AbsMoveValidator implements MoveValidator {

	HantoCoordinateImpl boardOrigin = new HantoCoordinateImpl(0,0);
	

	
	protected void handleMoveCheck(HantoBoard theBoard, HantoPiece piece, MoveCounterImpl counter,
			HantoCoordinateImpl to, HantoCoordinateImpl from) {
		
		validResult = checkIfMoveIsToContiguousPeice(theBoard, to, from) &&
				checkIfPlaceLocationIsNotOccupied(theBoard, to, from);
	}
	

	private boolean checkIfPlaceLocationIsNotOccupied(HantoBoard theBoard, HantoCoordinateImpl to,
			HantoCoordinateImpl from) {
		// TODO Auto-generated method stub
		return !theBoard.isLocationOccupied(to);
	}

	private boolean checkIfMoveIsToContiguousPeice(HantoBoard theBoard, HantoCoordinateImpl to, HantoCoordinateImpl from) {
		boolean result = false;
		Queue<HantoCoordinate> neighbors = to.getNeighbors();
		
		for(HantoCoordinate hc : neighbors){
			if(theBoard.isLocationOccupied(new HantoCoordinateImpl(hc))){
				if (!areHantoCoordinatesEqual(from, hc)){
					result = true;
					break;
				}
			}
		}
		return result;
	}

	/**
	 * Function compares two hanto coordinates 
	 * @param from
	 * @param hc
	 * @return
	 */
	private boolean areHantoCoordinatesEqual(HantoCoordinate coorda, HantoCoordinate coordb) {
		return (new HantoCoordinateImpl(hc)).equals(new HantoCoordinateImpl(from));
	}


	/* (non-Javadoc)
	 * @see hanto.studentThhughes.common.moveValidator.MoveValidator#invalidError()
	 */
	@Override
	public void invalidError() throws HantoException {
		throw new HantoException("Invalid Location Exception");

	}

}
