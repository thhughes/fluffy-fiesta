package hanto.studentthhughes.actionfinder;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import hanto.common.HantoCoordinate;
import hanto.common.HantoGameID;
import hanto.common.HantoPiece;
import hanto.common.HantoPieceType;
import hanto.common.HantoPlayerColor;
import hanto.studentthhughes.common.HantoGamePieceInformation;
import hanto.studentthhughes.common.HantoGameStateEvaluatorFactory;
import hanto.studentthhughes.common.HantoTurnActionValidatorFactory;
import hanto.studentthhughes.common.coordinate.HantoCoordinateImpl;
import hanto.studentthhughes.common.gamestateevaluator.GameStateEvaluator;
import hanto.studentthhughes.common.hantoboardandboardtools.HantoBoard;
import hanto.studentthhughes.common.hantopiece.HantoPieceImpl;
import hanto.studentthhughes.common.movecounter.MoveCounter;
import hanto.studentthhughes.common.turnactionvalidator.TurnActionValidator;
import hanto.tournament.HantoMoveRecord;

public class ActionFinder {
	TurnActionValidator tav;
	GameStateEvaluator gse;
	HantoGamePieceInformation pieceMaster;
	
	public ActionFinder(HantoGameID gameID){
		gse = HantoGameStateEvaluatorFactory.getInstance().makeHantoValidator(gameID);
		tav = HantoTurnActionValidatorFactory.getInstance().makeHantoValidator(gameID);
		pieceMaster = new HantoGamePieceInformation(gameID);
		
	}
	
	/**
	 * Gets a HantoMoveRecord for a given color at a given turn on a given board
	 * 
	 * @param theBoard
	 * 				HantoBoard : the board to check if a move can be made
	 * @param theCounter
	 * 				MoveCounter : information on the turns of the game for the board
	 * @param color
	 * 				HantoPlayerColor : the color of the player to check if an action is makeable
	 * @return
	 * 				HantoMoveRecord : that contains the move information for the action
	 */
	HantoMoveRecord getAction(HantoBoard theBoard, MoveCounter theCounter, HantoPlayerColor color){
		HantoMoveRecord result = getPlaceAction(theBoard, theCounter, color);
		if(result == null){
			result = getMoveAction(theBoard, theCounter, color);
		}
		return result;
	}
	
	/**
	 * Checks to make sure that an action is able to be made
	 * 
	 * @param theBoard
	 * 				HantoBoard : the board to check if a move can be made
	 * @param theCounter
	 * 				MoveCounter : information on the turns of the game for the board
	 * @param color
	 * 				HantoPlayerColor : the color of the player to check if an action is makeable
	 * @return
	 * 				Boolean : true if an action is makeable.
	 */
	boolean isActionMakeable(HantoBoard theBoard, MoveCounter theCounter, HantoPlayerColor color){
		boolean result = true;
		if(getAction(theBoard,theCounter,color) == null){
			result = false;
		}
		return result;
	}


	private HantoMoveRecord getMoveAction(HantoBoard theBoard, MoveCounter theCounter, HantoPlayerColor color) {
		// TODO Auto-generated method stub
		return null;
	}


	/**
	 * This method get's an action of placing 
	 * @param theBoard
	 * @param theCounter
	 * @param color
	 * @return
	 */
	private HantoMoveRecord getPlaceAction(HantoBoard theBoard, MoveCounter theCounter, HantoPlayerColor color) {
		/*
		 * Get collection of piece type
		 * Get count of pieces Randomally pick a piece. 
		 * Find a place to place it. 
		 * If there are no pieces, return null
		 * If you can't get any good moves from all of the pieces return null
		 */
		
		HantoMoveRecord result = null;
		HantoPieceType piece = pickPieceToPlace(theBoard.getPlayerPieces(color).values());
		
		if(piece != null){
			result = pickPlaceToPutPiece(piece, theBoard, theCounter, color);
		}
		
		return result;
	}


	
	private HantoMoveRecord pickPlaceToPutPiece(HantoPieceType type, HantoBoard theBoard, 
			MoveCounter theCounter, HantoPlayerColor color) {
		
		HantoCoordinate placeLocation = findPlaceLocation();
		
		HantoMoveRecord result = null;
		if (placeLocation != null){
			result = new HantoMoveRecord(type, null, placeLocation);
		}
		return result;
	}

	private HantoCoordinateImpl findPlaceLocation() {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * Finds a valid piece to place
	 * 
	 * @param values
	 * 				Collection<HantoPiece> that are currently on the board
	 * @return
	 * 			HantoPiece or Null : Piece if there is a valid one and null if there is not 
	 */
	private HantoPieceType pickPieceToPlace(Collection<HantoPiece> values) {
		HantoPieceType result = null;
		Map<HantoPieceType, Integer> pieceCount = getNumberPieceMap(values);
		for(HantoPieceType hpt : pieceCount.keySet()){
			if(pieceCount.get(hpt) < pieceMaster.getMaxNumPiece(hpt)){
				result = hpt;
				break;
			}

		}
		return result;
	}

	/**
	 * Get a map of HantoPieceType's to Integers that contains the count of 
	 * each of the types of pieces on the board. 
	 * 
	 * @param values
	 * 				Collection<HantoPiece> : of HantoPieces on a board
	 * @return
	 * 			Map<HantoPieceType, Integer> of the information on the board.
	 */
	private Map<HantoPieceType, Integer> getNumberPieceMap(Collection<HantoPiece> values) {
		Map<HantoPieceType, Integer> count = new HashMap<HantoPieceType, Integer>();
		for(HantoPiece hp : values){
			if(count.containsKey(hp.getType())){
				count.put(hp.getType(), new Integer(count.get(hp.getType()) + 1));
			}else{
				count.put(hp.getType(), new Integer(1));
			}
		}
		return count;
	}

}
