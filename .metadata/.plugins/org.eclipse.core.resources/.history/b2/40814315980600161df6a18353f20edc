/*******************************************************************************
 * This files was developed for CS4233: Object-Oriented Analysis & Design.
 * The course was taken at Worcester Polytechnic Institute.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/

package hanto.teststudentthhughes.delta;

import static hanto.common.HantoPieceType.*;
import static hanto.common.MoveResult.*;
import static hanto.common.HantoPlayerColor.*;
import static org.junit.Assert.*;
import hanto.common.*;
import hanto.studentthhughes.HantoGameFactory;

import org.junit.*;

/**
 * Test cases for Delta Hanto.
 * @version Sep 14, 2014
 */
public class JohnDeltaTest
{
	/**
	 * Internal class for these test cases.
	 * @version Sep 13, 2014
	 */
	class TestHantoCoordinate implements HantoCoordinate
	{
		private final int x, y;
		
		public TestHantoCoordinate(int x, int y)
		{
			this.x = x;
			this.y = y;
		}
		/*
		 * @see hanto.common.HantoCoordinate#getX()
		 */
		@Override
		public int getX()
		{
			return x;
		}

		/*
		 * @see hanto.common.HantoCoordinate#getY()
		 */
		@Override
		public int getY()
		{
			return y;
		}

	}
	
	private static HantoGameFactory factory;
	private HantoGame game;
	
	@BeforeClass
	public static void initializeClass()
	{
		factory = HantoGameFactory.getInstance();
	}
	
	@Before
	public void setup()
	{
		// By default, blue moves first.
		game = factory.makeHantoGame(HantoGameID.DELTA_HANTO);
	}
	
	@Test
	public void bluePlacesInitialButterflyAtOrigin() throws HantoException
	{
		final MoveResult mr = game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		assertEquals(OK, mr);
		final HantoPiece p = game.getPieceAt(makeCoordinate(0, 0));
		assertEquals(BLUE, p.getColor());
		assertEquals(BUTTERFLY, p.getType());
	}
	
	@Test(expected = HantoException.class)
	public void bluePlacesInitialButterflyOffOrigin() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
	}
	
	@Test
	public void redPlacesInitialButterflyValid() throws HantoException
	{
		MoveResult mr = game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		assertEquals(OK, mr);
		mr = game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		assertEquals(OK, mr);
		final HantoPiece p = game.getPieceAt(makeCoordinate(0, 1));
		assertEquals(RED, p.getColor());
		assertEquals(BUTTERFLY, p.getType());
	}
	
	@Test(expected = HantoException.class)
	public void spaceAlreadyTaken() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		MoveResult mr = game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		assertEquals(OK, mr);
		game.makeMove(SPARROW, null, makeCoordinate(0, 1));
	}
	
	@Test(expected = HantoException.class)
	public void redPlacesInitialButterflyInvalid() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 3));
	}
	
	@Test(expected = HantoException.class)
	public void toIsNull() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, null);
	}
	
	@Test(expected = HantoException.class)
	public void blueMovesButterflyInvalid() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0,1));
		game.makeMove(BUTTERFLY, makeCoordinate(0,0), makeCoordinate(0,2));
	}
	
	@Test
	public void blueMovesButterflyValid() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0,1));
		game.makeMove(BUTTERFLY, makeCoordinate(0,0), makeCoordinate(1,0));
	}
	
	@Test (expected = HantoException.class)
	public void twoBlueButterfliesPlaced() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0,1));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, -1));
	}
	
	@Test (expected = HantoException.class)
	public void twoRedButterfliesPlaced() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0,1));
		game.makeMove(SPARROW, null, makeCoordinate(0, 2));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0,3));
	}
	
	@Test
	public void bluePlacesSparrowFirst() throws HantoException
	{
		MoveResult mr = game.makeMove(SPARROW, null, makeCoordinate(0, 0));
		assertEquals(OK, mr);
		final HantoPiece p = game.getPieceAt(makeCoordinate(0, 0));
		assertEquals(BLUE, p.getColor());
		assertEquals(SPARROW, p.getType());
	}
	
	@Test (expected = HantoException.class)
	public void bluePlacesCrabSecond() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(CRAB, null, makeCoordinate(0, 2));
	}
	
	@Test
	public void notTooManySparrows() throws HantoException
	{
		game.makeMove(SPARROW, null, makeCoordinate(0, 0));
		game.makeMove(SPARROW, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(0, -1));
		game.makeMove(SPARROW, null, makeCoordinate(0, 2));
		game.makeMove(SPARROW, null, makeCoordinate(0, -2));
		MoveResult mr = game.makeMove(SPARROW, null, makeCoordinate(0, 3));
		assertEquals(OK, mr);
	}
	
	@Test (expected = HantoException.class)
	public void blueDidntPlaceButterfly() throws HantoException
	{
		game.makeMove(SPARROW, null, makeCoordinate(0, 0));
		game.makeMove(SPARROW, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(0, -1));
		game.makeMove(SPARROW, null, makeCoordinate(0, 2));
		game.makeMove(SPARROW, null, makeCoordinate(0, -2));
		game.makeMove(SPARROW, null, makeCoordinate(0, 3));
		game.makeMove(SPARROW, null, makeCoordinate(0, -3));
	}
	
	@Test (expected = HantoException.class)
	public void redDidntPlaceButterfly() throws HantoException
	{
		game.makeMove(SPARROW, null, makeCoordinate(0, 0));
		game.makeMove(SPARROW, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(0, -1));
		game.makeMove(SPARROW, null, makeCoordinate(0, 2));
		game.makeMove(SPARROW, null, makeCoordinate(0, -2));
		game.makeMove(SPARROW, null, makeCoordinate(0, 3));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, -3));
		game.makeMove(SPARROW, null, makeCoordinate(0,4));
	}
	
	@Test//17
	public void redWins() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));//B
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(1, -1));//B
		game.makeMove(SPARROW, null, makeCoordinate(1, 1));
		game.makeMove(SPARROW, null, makeCoordinate(-1, 0));//B
		game.makeMove(SPARROW, null, makeCoordinate(-1, 2));
		game.makeMove(SPARROW, null, makeCoordinate(0, -1));//B
		game.makeMove(SPARROW, makeCoordinate(1,1), makeCoordinate(1, 0));
		game.makeMove(SPARROW, null, makeCoordinate(0, -2));//B
		MoveResult mr = game.makeMove(SPARROW, makeCoordinate(-1,2), makeCoordinate(-1, 1));
		assertEquals(RED_WINS, mr);
	}
	
	@Test//18
	public void blueWins() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));//B
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(1, -1));//B
		game.makeMove(SPARROW, null, makeCoordinate(1, 1));
		game.makeMove(SPARROW, null, makeCoordinate(-1, 0));//B
		game.makeMove(SPARROW, null, makeCoordinate(-1, 2));
		game.makeMove(SPARROW, makeCoordinate(-1,0), makeCoordinate(-1, 1));//B
		game.makeMove(SPARROW, null, makeCoordinate(0, 2));
		MoveResult mr = game.makeMove(SPARROW, makeCoordinate(1,-1), makeCoordinate(1, 0));//B
		assertEquals(BLUE_WINS, mr);
	}
	
	@Test (expected = HantoException.class)
	public void moveWrongType() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));//B
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, makeCoordinate(0,0), makeCoordinate(1, 0));//B
	}
	
	@Test (expected = HantoException.class)
	public void toNotAdjacent() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));//B
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(0, -2));//B
	}
	
	@Test (expected = HantoException.class)
	public void blueMovesRed() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));//B
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(BUTTERFLY, makeCoordinate(0,1), makeCoordinate(1, 0));//B
	}
	
	@Test (expected = HantoException.class)
	public void redMovesBlue() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));//B
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(1, -1));//B
		game.makeMove(SPARROW, makeCoordinate(1,-1), makeCoordinate(0, -1));
	}
	
	@Test 
	public void redMovesButterfly() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));//B
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(1, -1));//B
		game.makeMove(BUTTERFLY, makeCoordinate(0,1), makeCoordinate(1, 0));
	}
	
	@Test (expected = HantoException.class)
	public void redPlacesNextToBlue() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));//B
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(1, -1));//B
		game.makeMove(SPARROW, null, makeCoordinate(0, -1));
	}
	
	@Test (expected = HantoException.class)
	public void bluePlacesNextToRed() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));//B
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(0, 2));//B
	}
	
	@Test (expected = HantoException.class)
	public void redPlacesNextToBlueAndRed() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));//B
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(1, -1));//B
		game.makeMove(SPARROW, null, makeCoordinate(1, 0));
	}
	
	@Test (expected = HantoException.class)
	public void bluePlacesNextToBlueAndRed() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));//B
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(1, 0));//B
	}
	
	@Test (expected = HantoException.class)
	public void blueMovesThrough() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));//B
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(-1, 0));//B
		game.makeMove(SPARROW, null, makeCoordinate(-1, 2));
		game.makeMove(BUTTERFLY, makeCoordinate(0, 0), makeCoordinate(-1, 1));
	}
	
	@Test (expected = HantoException.class)
	public void redGoesFirstNotOrigin() throws HantoException
	{
		HantoGame rGame;
		rGame = factory.makeHantoGame(HantoGameID.DELTA_HANTO, RED);
		rGame.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));//R
	}
	
	@Test
	public void redGoesFirstSparrow() throws HantoException
	{
		HantoGame rGame;
		rGame = factory.makeHantoGame(HantoGameID.DELTA_HANTO, RED);
		rGame.makeMove(SPARROW, null, makeCoordinate(0, 0));//R
		rGame.makeMove(SPARROW, null, makeCoordinate(0, 1));
	}
	
	@Test
	public void redGoesFirstButterfly() throws HantoException
	{
		HantoGame rGame;
		rGame = factory.makeHantoGame(HantoGameID.DELTA_HANTO, RED);
		rGame.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));//R
		rGame.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
	}
	
	@Test (expected = HantoException.class)
	public void tooManySparrowsBlue() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(0, -1));
		game.makeMove(SPARROW, null, makeCoordinate(0, 2));
		game.makeMove(SPARROW, null, makeCoordinate(0, -2));
		game.makeMove(SPARROW, null, makeCoordinate(0, 3));
		game.makeMove(SPARROW, null, makeCoordinate(0, -3));
		game.makeMove(SPARROW, null, makeCoordinate(0, 4));
		game.makeMove(SPARROW, null, makeCoordinate(0, -4));
		game.makeMove(SPARROW, null, makeCoordinate(0, 5));
		game.makeMove(SPARROW, null, makeCoordinate(0, -5));
		game.makeMove(SPARROW, null, makeCoordinate(0, 6));
		game.makeMove(SPARROW, null, makeCoordinate(0, -6));
	}
	
	@Test (expected = HantoException.class)
	public void tooManySparrowsRed() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(0, -1));
		game.makeMove(SPARROW, null, makeCoordinate(0, 2));
		game.makeMove(SPARROW, null, makeCoordinate(0, -2));
		game.makeMove(SPARROW, null, makeCoordinate(0, 3));
		game.makeMove(SPARROW, null, makeCoordinate(0, -3));
		game.makeMove(SPARROW, null, makeCoordinate(0, 4));
		game.makeMove(SPARROW, null, makeCoordinate(0, -4));
		game.makeMove(SPARROW, null, makeCoordinate(0, 5));
		game.makeMove(SPARROW, null, makeCoordinate(0, -5));
		game.makeMove(SPARROW, null, makeCoordinate(0, 6));
		game.makeMove(SPARROW, makeCoordinate(0, -5), makeCoordinate(1, -5));
		game.makeMove(SPARROW, null, makeCoordinate(0, 7));
	}
	
	@Test
	public void blueResigns() throws HantoException
	{
		MoveResult mr = game.makeMove(null, null, null);
		assertEquals(mr, RED_WINS);
	}
	
	@Test
	public void redResigns() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		MoveResult mr = game.makeMove(null, null, null);
		assertEquals(mr, BLUE_WINS);
	}
	
	@Test
	public void butterflyWalksOne() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(BUTTERFLY, makeCoordinate(0, 0), makeCoordinate(1, 0));
	}
	
	@Test(expected = HantoException.class)
	public void butterflyWalksTwo() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(BUTTERFLY, makeCoordinate(0, 0), makeCoordinate(1, 1));
	}
	@Test
	public void crabWalksTwo() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(CRAB, null, makeCoordinate(0, -1));
		game.makeMove(SPARROW, null, makeCoordinate(0, 2));
		game.makeMove(CRAB, makeCoordinate(0, -1), makeCoordinate(1, 0));
	}
	
	@Test(expected = HantoException.class)
	public void crabWalksTooFar() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(CRAB, null, makeCoordinate(0, -1));
		MoveResult mr = game.makeMove(SPARROW, null, makeCoordinate(0, 2));
		assertEquals(OK, mr);
		game.makeMove(CRAB, makeCoordinate(0, -1), makeCoordinate(0, 3));
	}
	
	@Test
	public void asTheBirdFlies() throws HantoException
	{
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 0));
		game.makeMove(BUTTERFLY, null, makeCoordinate(0, 1));
		game.makeMove(SPARROW, null, makeCoordinate(0, -1));
		MoveResult mr = game.makeMove(SPARROW, null, makeCoordinate(0, 2));
		assertEquals(OK, mr);
		game.makeMove(SPARROW, makeCoordinate(0, -1), makeCoordinate(0, 3));
	}
	
	// Helper methods
	private HantoCoordinate makeCoordinate(int x, int y)
	{
		return new TestHantoCoordinate(x, y);
	}
}
